{
  "address": "0x9fe077323e27C7572B8735b1894F311AF4261A8a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotAllowlisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FailedToWithdrawEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistDestinationChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "allowlistedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokensPayLINK",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokensPayNative",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdb2e5b29470412695be2eb180140746e19ed81c38e39d1680f19aef32ec8db64",
  "receipt": {
    "to": null,
    "from": "0xe8658Dddc779097882A0f963f2C65fACBBa51ed1",
    "contractAddress": "0x9fe077323e27C7572B8735b1894F311AF4261A8a",
    "transactionIndex": 6,
    "gasUsed": "988675",
    "logsBloom": "0x
    "blockHash": "0xdb86492990df875dac710993182cc51ef91ad3017558930f341d58094f7114fc",
    "transactionHash": "0xdb2e5b29470412695be2eb180140746e19ed81c38e39d1680f19aef32ec8db64",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 7262817,
        "transactionHash": "0xdb2e5b29470412695be2eb180140746e19ed81c38e39d1680f19aef32ec8db64",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e8658dddc779097882a0f963f2c65facbba51ed1",
          "0x0000000000000000000000004631753190f2f5a15a7ba172bbac102b7d95fa22"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003dd1d386401000000000000000000000000000000000000000000000000001cf05c6fe00804f8000000000000000000000000000000000000000000000072c8d08d8df0560c610000000000000000000000000000000000000000000000001cec7f52a7a403f8000000000000000000000000000000000000000000000072c8d46aab28ba0d61",
        "logIndex": 26,
        "blockHash": "0xdb86492990df875dac710993182cc51ef91ad3017558930f341d58094f7114fc"
      }
    ],
    "blockNumber": 7262817,
    "cumulativeGasUsed": "18368380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9C32fCB86BF0f4a1A8921a9Fe46de3198bb884B2",
    "0x0Fd9e8d3aF1aaee056EB9e802c3A762a667b1904"
  ],
  "numDeployments": 3,
  "solcInputHash": "40f352c1955bcf1af2ed4e572530a6db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allowlistedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensPayLINK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensPayNative\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowlistDestinationChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a destination chain for transactions.\",\"params\":{\"_destinationChainSelector\":\"The selector of the destination chain to be updated.\",\"allowed\":\"The allowlist status to be set for the destination chain.\"}},\"constructor\":{\"params\":{\"_link\":\"The address of the link contract.\",\"_router\":\"The address of the router contract.\"}},\"transferTokensPayLINK(uint64,address,address,uint256)\":{\"details\":\"Assumes your contract has sufficient LINK tokens to pay for the fees.\",\"params\":{\"_amount\":\"token amount.\",\"_destinationChainSelector\":\"The identifier (aka selector) for the destination blockchain.\",\"_receiver\":\"The address of the recipient on the destination blockchain.\",\"_token\":\"token address.\"},\"returns\":{\"messageId\":\"The ID of the message that was sent.\"}},\"transferTokensPayNative(uint64,address,address,uint256)\":{\"details\":\"Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.\",\"params\":{\"_amount\":\"token amount.\",\"_destinationChainSelector\":\"The identifier (aka selector) for the destination blockchain.\",\"_receiver\":\"The address of the recipient on the destination blockchain.\",\"_token\":\"token address.\"},\"returns\":{\"messageId\":\"The ID of the message that was sent.\"}},\"withdraw(address)\":{\"details\":\"This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.\",\"params\":{\"_beneficiary\":\"The address to which the Ether should be transferred.\"}},\"withdrawToken(address,address)\":{\"details\":\"This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\",\"params\":{\"_beneficiary\":\"The address to which the tokens will be sent.\",\"_token\":\"The contract address of the ERC20 token to be withdrawn.\"}}},\"title\":\"- A simple contract for transferring tokens across chains.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowlistDestinationChain(uint64,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"constructor\":{\"notice\":\"Constructor initializes the contract with the router address.\"},\"transferTokensPayLINK(uint64,address,address,uint256)\":{\"notice\":\"Transfer tokens to receiver on the destination chain.pay in LINK.the token must be in the list of supported tokens.This function can only be called by the owner.\"},\"transferTokensPayNative(uint64,address,address,uint256)\":{\"notice\":\"Transfer tokens to receiver on the destination chain.Pay in native gas such as ETH on Ethereum or MATIC on Polgon.the token must be in the list of supported tokens.This function can only be called by the owner.\"},\"withdraw(address)\":{\"notice\":\"Allows the contract owner to withdraw the entire balance of Ether from the contract.\"},\"withdrawToken(address,address)\":{\"notice\":\"Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Trade.sol\":\"Trade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Trade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\n/// @title - A simple contract for transferring tokens across chains.\\r\\ncontract Trade {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\t// Custom errors to provide more descriptive revert messages.\\r\\n\\terror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.\\r\\n\\terror NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\r\\n\\terror FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\r\\n\\terror DestinationChainNotAllowlisted(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.\\r\\n\\terror InvalidReceiverAddress(); // Used when the receiver address is 0.\\r\\n\\t// Event emitted when the tokens are transferred to an account on another chain.\\r\\n\\tevent TokensTransferred(\\r\\n\\t\\tbytes32 indexed messageId, // The unique ID of the message.\\r\\n\\t\\tuint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\r\\n\\t\\taddress receiver, // The address of the receiver on the destination chain.\\r\\n\\t\\taddress token, // The token address that was transferred.\\r\\n\\t\\tuint256 tokenAmount, // The token amount that was transferred.\\r\\n\\t\\taddress feeToken, // the token address used to pay CCIP fees.\\r\\n\\t\\tuint256 fees // The fees paid for sending the message.\\r\\n\\t);\\r\\n\\r\\n\\t// Mapping to keep track of allowlisted destination chains.\\r\\n\\tmapping(uint64 => bool) public allowlistedChains;\\r\\n\\r\\n\\tIRouterClient private s_router;\\r\\n\\r\\n\\tIERC20 private s_linkToken;\\r\\n\\r\\n\\t/// @notice Constructor initializes the contract with the router address.\\r\\n\\t/// @param _router The address of the router contract.\\r\\n\\t/// @param _link The address of the link contract.\\r\\n\\tconstructor(address _router, address _link) {\\r\\n\\t\\ts_router = IRouterClient(_router);\\r\\n\\t\\ts_linkToken = IERC20(_link);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\\r\\n\\t/// @param _destinationChainSelector The selector of the destination chain.\\r\\n\\tmodifier onlyAllowlistedChain(uint64 _destinationChainSelector) {\\r\\n\\t\\tif (!allowlistedChains[_destinationChainSelector])\\r\\n\\t\\t\\trevert DestinationChainNotAllowlisted(_destinationChainSelector);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Modifier that checks the receiver address is not 0.\\r\\n\\t/// @param _receiver The receiver address.\\r\\n\\tmodifier validateReceiver(address _receiver) {\\r\\n\\t\\tif (_receiver == address(0)) revert InvalidReceiverAddress();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Updates the allowlist status of a destination chain for transactions.\\r\\n\\t/// @notice This function can only be called by the owner.\\r\\n\\t/// @param _destinationChainSelector The selector of the destination chain to be updated.\\r\\n\\t/// @param allowed The allowlist status to be set for the destination chain.\\r\\n\\tfunction allowlistDestinationChain(\\r\\n\\t\\tuint64 _destinationChainSelector,\\r\\n\\t\\tbool allowed\\r\\n\\t) external {\\r\\n\\t\\tallowlistedChains[_destinationChainSelector] = allowed;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Transfer tokens to receiver on the destination chain.\\r\\n\\t/// @notice pay in LINK.\\r\\n\\t/// @notice the token must be in the list of supported tokens.\\r\\n\\t/// @notice This function can only be called by the owner.\\r\\n\\t/// @dev Assumes your contract has sufficient LINK tokens to pay for the fees.\\r\\n\\t/// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\r\\n\\t/// @param _receiver The address of the recipient on the destination blockchain.\\r\\n\\t/// @param _token token address.\\r\\n\\t/// @param _amount token amount.\\r\\n\\t/// @return messageId The ID of the message that was sent.\\r\\n\\tfunction transferTokensPayLINK(\\r\\n\\t\\tuint64 _destinationChainSelector,\\r\\n\\t\\taddress _receiver,\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\tonlyAllowlistedChain(_destinationChainSelector)\\r\\n\\t\\tvalidateReceiver(_receiver)\\r\\n\\t\\treturns (bytes32 messageId)\\r\\n\\t{\\r\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n\\t\\t//  address(linkToken) means fees are paid in LINK\\r\\n\\t\\tClient.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n\\t\\t\\t_receiver,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\taddress(s_linkToken)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Get the fee required to send the message\\r\\n\\t\\tuint256 fees = s_router.getFee(\\r\\n\\t\\t\\t_destinationChainSelector,\\r\\n\\t\\t\\tevm2AnyMessage\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (fees > s_linkToken.balanceOf(address(this)))\\r\\n\\t\\t\\trevert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n\\t\\t// approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\r\\n\\t\\ts_linkToken.approve(address(s_router), fees);\\r\\n\\r\\n\\t\\t// approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\\r\\n\\t\\tIERC20(_token).approve(address(s_router), _amount);\\r\\n\\r\\n\\t\\t// Send the message through the router and store the returned message ID\\r\\n\\t\\tmessageId = s_router.ccipSend(\\r\\n\\t\\t\\t_destinationChainSelector,\\r\\n\\t\\t\\tevm2AnyMessage\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Emit an event with message details\\r\\n\\t\\temit TokensTransferred(\\r\\n\\t\\t\\tmessageId,\\r\\n\\t\\t\\t_destinationChainSelector,\\r\\n\\t\\t\\t_receiver,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\taddress(s_linkToken),\\r\\n\\t\\t\\tfees\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Return the message ID\\r\\n\\t\\treturn messageId;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Transfer tokens to receiver on the destination chain.\\r\\n\\t/// @notice Pay in native gas such as ETH on Ethereum or MATIC on Polgon.\\r\\n\\t/// @notice the token must be in the list of supported tokens.\\r\\n\\t/// @notice This function can only be called by the owner.\\r\\n\\t/// @dev Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.\\r\\n\\t/// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\r\\n\\t/// @param _receiver The address of the recipient on the destination blockchain.\\r\\n\\t/// @param _token token address.\\r\\n\\t/// @param _amount token amount.\\r\\n\\t/// @return messageId The ID of the message that was sent.\\r\\n\\tfunction transferTokensPayNative(\\r\\n\\t\\tuint64 _destinationChainSelector,\\r\\n\\t\\taddress _receiver,\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\tonlyAllowlistedChain(_destinationChainSelector)\\r\\n\\t\\tvalidateReceiver(_receiver)\\r\\n\\t\\treturns (bytes32 messageId)\\r\\n\\t{\\r\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n\\t\\t// address(0) means fees are paid in native gas\\r\\n\\t\\tClient.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n\\t\\t\\t_receiver,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\taddress(0)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Get the fee required to send the message\\r\\n\\t\\tuint256 fees = s_router.getFee(\\r\\n\\t\\t\\t_destinationChainSelector,\\r\\n\\t\\t\\tevm2AnyMessage\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (fees > address(this).balance)\\r\\n\\t\\t\\trevert NotEnoughBalance(address(this).balance, fees);\\r\\n\\r\\n\\t\\t// approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\\r\\n\\t\\tIERC20(_token).approve(address(s_router), _amount);\\r\\n\\r\\n\\t\\t// Send the message through the router and store the returned message ID\\r\\n\\t\\tmessageId = s_router.ccipSend{ value: fees }(\\r\\n\\t\\t\\t_destinationChainSelector,\\r\\n\\t\\t\\tevm2AnyMessage\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Emit an event with message details\\r\\n\\t\\temit TokensTransferred(\\r\\n\\t\\t\\tmessageId,\\r\\n\\t\\t\\t_destinationChainSelector,\\r\\n\\t\\t\\t_receiver,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\taddress(0),\\r\\n\\t\\t\\tfees\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Return the message ID\\r\\n\\t\\treturn messageId;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Construct a CCIP message.\\r\\n\\t/// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\\r\\n\\t/// @param _receiver The address of the receiver.\\r\\n\\t/// @param _token The token to be transferred.\\r\\n\\t/// @param _amount The amount of the token to be transferred.\\r\\n\\t/// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\r\\n\\t/// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\r\\n\\tfunction _buildCCIPMessage(\\r\\n\\t\\taddress _receiver,\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\taddress _feeTokenAddress\\r\\n\\t) private pure returns (Client.EVM2AnyMessage memory) {\\r\\n\\t\\t// Set the token amounts\\r\\n\\t\\tClient.EVMTokenAmount[]\\r\\n\\t\\t\\tmemory tokenAmounts = new Client.EVMTokenAmount[](1);\\r\\n\\t\\ttokenAmounts[0] = Client.EVMTokenAmount({\\r\\n\\t\\t\\ttoken: _token,\\r\\n\\t\\t\\tamount: _amount\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n\\t\\treturn\\r\\n\\t\\t\\tClient.EVM2AnyMessage({\\r\\n\\t\\t\\t\\treceiver: abi.encode(_receiver), // ABI-encoded receiver address\\r\\n\\t\\t\\t\\tdata: \\\"\\\", // No data\\r\\n\\t\\t\\t\\ttokenAmounts: tokenAmounts, // The amount and type of token being transferred\\r\\n\\t\\t\\t\\textraArgs: Client._argsToBytes(\\r\\n\\t\\t\\t\\t\\t// Additional arguments, setting gas limit to 0 as we are not sending any data\\r\\n\\t\\t\\t\\t\\tClient.EVMExtraArgsV1({ gasLimit: 0 })\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t// Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\r\\n\\t\\t\\t\\tfeeToken: _feeTokenAddress\\r\\n\\t\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Fallback function to allow the contract to receive Ether.\\r\\n\\t/// @dev This function has no function body, making it a default function for receiving Ether.\\r\\n\\t/// It is automatically called when Ether is transferred to the contract without any data.\\r\\n\\treceive() external payable {}\\r\\n\\r\\n\\t/// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\\r\\n\\t/// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\\r\\n\\t/// It should only be callable by the owner of the contract.\\r\\n\\t/// @param _beneficiary The address to which the Ether should be transferred.\\r\\n\\tfunction withdraw(address _beneficiary) public {\\r\\n\\t\\t// Retrieve the balance of this contract\\r\\n\\t\\tuint256 amount = address(this).balance;\\r\\n\\r\\n\\t\\t// Revert if there is nothing to withdraw\\r\\n\\t\\tif (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n\\t\\t// Attempt to send the funds, capturing the success status and discarding any return data\\r\\n\\t\\t(bool sent, ) = _beneficiary.call{ value: amount }(\\\"\\\");\\r\\n\\r\\n\\t\\t// Revert if the send failed, with information about the attempted transfer\\r\\n\\t\\tif (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\r\\n\\t/// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\r\\n\\t/// @param _beneficiary The address to which the tokens will be sent.\\r\\n\\t/// @param _token The contract address of the ERC20 token to be withdrawn.\\r\\n\\tfunction withdrawToken(address _beneficiary, address _token) public {\\r\\n\\t\\t// Retrieve the balance of this contract\\r\\n\\t\\tuint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n\\t\\t// Revert if there is nothing to withdraw\\r\\n\\t\\tif (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n\\t\\tIERC20(_token).safeTransfer(_beneficiary, amount);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x019755ad429a1cad7ddb426146c7992f7b68ea014b4b33fc48fb4ed2dc6bdc78\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516110cc3803806110cc83398101604081905261002f9161007c565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61100e806100be6000396000f3fe6080604052600436106100595760003560e01c80630bb106eb146100655780633aeac4e1146100aa57806351419b4b146100cc57806351cff8d9146100fa57806395e1402c1461011a57806396d3b83d1461013a57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610095610080366004610d19565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156100b657600080fd5b506100ca6100c5366004610d52565b610181565b005b3480156100d857600080fd5b506100ec6100e7366004610d85565b610228565b6040519081526020016100a1565b34801561010657600080fd5b506100ca610115366004610dd0565b6104b7565b34801561012657600080fd5b506100ec610135366004610d85565b610566565b34801561014657600080fd5b506100ca610155366004610dfc565b67ffffffffffffffff919091166000908152602081905260409020805460ff1916911515919091179055565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec9190610e33565b90508060000361020f57604051630686827b60e51b815260040160405180910390fd5b6102236001600160a01b0383168483610943565b505050565b67ffffffffffffffff8416600090815260208190526040812054859060ff1661027557604051630a503cdb60e01b815267ffffffffffffffff821660048201526024015b60405180910390fd5b846001600160a01b03811661029d5760405163502ffa3f60e11b815260040160405180910390fd5b60006102ac8787876000610995565b6001546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded906102e4908c908690600401610e9c565b602060405180830381865afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610e33565b90504781111561035157604051634787a10360e11b81524760048201526024810182905260440161026c565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018890529088169063095ea7b3906044016020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190610f76565b506001546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f99083906103fd908d908790600401610e9c565b60206040518083038185885af115801561041b573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104409190610e33565b604080516001600160a01b03808c1682528a166020820152908101889052600060608201526080810183905290955067ffffffffffffffff8a169086907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0015b60405180910390a350505050949350505050565b4760008190036104da57604051630686827b60e51b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b505090508061022357604051639d11f56360e01b81523360048201526001600160a01b03841660248201526044810183905260640161026c565b67ffffffffffffffff8416600090815260208190526040812054859060ff166105ae57604051630a503cdb60e01b815267ffffffffffffffff8216600482015260240161026c565b846001600160a01b0381166105d65760405163502ffa3f60e11b815260040160405180910390fd5b6002546000906105f4908890889088906001600160a01b0316610995565b6001546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded9061062c908c908690600401610e9c565b602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610e33565b6002546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610e33565b811115610771576002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190610e33565b604051634787a10360e11b815260048101919091526024810182905260440161026c565b60025460015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af11580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190610f76565b5060015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018890529088169063095ea7b3906044016020604051808303816000875af115801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190610f76565b506001546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f990610895908c908690600401610e9c565b6020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610e33565b600254604080516001600160a01b03808d168252808c1660208301529181018a9052911660608201526080810183905290955067ffffffffffffffff8a169086907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0016104a3565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610223908490610b07565b6109d06040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816109e75790505090506040518060400160405280866001600160a01b031681526020018581525081600081518110610a4157610a41610f93565b60209081029190910101526040805160a081019091526001600160a01b03871660c08201528060e081016040516020818303038152906040528152602001604051806020016040528060008152508152602001828152602001846001600160a01b03168152602001610af96040518060200160405280600081525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b90529150505b949350505050565b6000610b5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bd99092919063ffffffff16565b8051909150156102235780806020019051810190610b7a9190610f76565b6102235760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026c565b6060610aff848460008585600080866001600160a01b03168587604051610c009190610fa9565b60006040518083038185875af1925050503d8060008114610c3d576040519150601f19603f3d011682016040523d82523d6000602084013e610c42565b606091505b5091509150610c5387838387610c5e565b979650505050505050565b60608315610ccd578251600003610cc6576001600160a01b0385163b610cc65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026c565b5081610aff565b610aff8383815115610ce25781518083602001fd5b8060405162461bcd60e51b815260040161026c9190610fc5565b803567ffffffffffffffff81168114610d1457600080fd5b919050565b600060208284031215610d2b57600080fd5b610d3482610cfc565b9392505050565b80356001600160a01b0381168114610d1457600080fd5b60008060408385031215610d6557600080fd5b610d6e83610d3b565b9150610d7c60208401610d3b565b90509250929050565b60008060008060808587031215610d9b57600080fd5b610da485610cfc565b9350610db260208601610d3b565b9250610dc060408601610d3b565b9396929550929360600135925050565b600060208284031215610de257600080fd5b610d3482610d3b565b8015158114610df957600080fd5b50565b60008060408385031215610e0f57600080fd5b610e1883610cfc565b91506020830135610e2881610deb565b809150509250929050565b600060208284031215610e4557600080fd5b5051919050565b60005b83811015610e67578181015183820152602001610e4f565b50506000910152565b60008151808452610e88816020860160208601610e4c565b601f01601f19169290920160200192915050565b6000604067ffffffffffffffff8516835260208181850152845160a083860152610ec960e0860182610e70565b905081860151603f1980878403016060880152610ee68383610e70565b88860151888203830160808a01528051808352908601945060009350908501905b80841015610f3957845180516001600160a01b0316835286015186830152938501936001939093019290860190610f07565b5060608901516001600160a01b031660a08901526080890151888203830160c08a01529550610f688187610e70565b9a9950505050505050505050565b600060208284031215610f8857600080fd5b8151610d3481610deb565b634e487b7160e01b600052603260045260246000fd5b60008251610fbb818460208701610e4c565b9190910192915050565b602081526000610d346020830184610e7056fea2646970667358221220d13e82f83c05c793d0057a01680f3abf06c5426d16543ca4b4665eb1ef0df79264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80630bb106eb146100655780633aeac4e1146100aa57806351419b4b146100cc57806351cff8d9146100fa57806395e1402c1461011a57806396d3b83d1461013a57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610095610080366004610d19565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156100b657600080fd5b506100ca6100c5366004610d52565b610181565b005b3480156100d857600080fd5b506100ec6100e7366004610d85565b610228565b6040519081526020016100a1565b34801561010657600080fd5b506100ca610115366004610dd0565b6104b7565b34801561012657600080fd5b506100ec610135366004610d85565b610566565b34801561014657600080fd5b506100ca610155366004610dfc565b67ffffffffffffffff919091166000908152602081905260409020805460ff1916911515919091179055565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec9190610e33565b90508060000361020f57604051630686827b60e51b815260040160405180910390fd5b6102236001600160a01b0383168483610943565b505050565b67ffffffffffffffff8416600090815260208190526040812054859060ff1661027557604051630a503cdb60e01b815267ffffffffffffffff821660048201526024015b60405180910390fd5b846001600160a01b03811661029d5760405163502ffa3f60e11b815260040160405180910390fd5b60006102ac8787876000610995565b6001546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded906102e4908c908690600401610e9c565b602060405180830381865afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610e33565b90504781111561035157604051634787a10360e11b81524760048201526024810182905260440161026c565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018890529088169063095ea7b3906044016020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190610f76565b506001546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f99083906103fd908d908790600401610e9c565b60206040518083038185885af115801561041b573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104409190610e33565b604080516001600160a01b03808c1682528a166020820152908101889052600060608201526080810183905290955067ffffffffffffffff8a169086907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0015b60405180910390a350505050949350505050565b4760008190036104da57604051630686827b60e51b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b505090508061022357604051639d11f56360e01b81523360048201526001600160a01b03841660248201526044810183905260640161026c565b67ffffffffffffffff8416600090815260208190526040812054859060ff166105ae57604051630a503cdb60e01b815267ffffffffffffffff8216600482015260240161026c565b846001600160a01b0381166105d65760405163502ffa3f60e11b815260040160405180910390fd5b6002546000906105f4908890889088906001600160a01b0316610995565b6001546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded9061062c908c908690600401610e9c565b602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610e33565b6002546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610e33565b811115610771576002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190610e33565b604051634787a10360e11b815260048101919091526024810182905260440161026c565b60025460015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af11580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190610f76565b5060015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018890529088169063095ea7b3906044016020604051808303816000875af115801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190610f76565b506001546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f990610895908c908690600401610e9c565b6020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610e33565b600254604080516001600160a01b03808d168252808c1660208301529181018a9052911660608201526080810183905290955067ffffffffffffffff8a169086907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0016104a3565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610223908490610b07565b6109d06040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816109e75790505090506040518060400160405280866001600160a01b031681526020018581525081600081518110610a4157610a41610f93565b60209081029190910101526040805160a081019091526001600160a01b03871660c08201528060e081016040516020818303038152906040528152602001604051806020016040528060008152508152602001828152602001846001600160a01b03168152602001610af96040518060200160405280600081525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b90529150505b949350505050565b6000610b5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bd99092919063ffffffff16565b8051909150156102235780806020019051810190610b7a9190610f76565b6102235760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026c565b6060610aff848460008585600080866001600160a01b03168587604051610c009190610fa9565b60006040518083038185875af1925050503d8060008114610c3d576040519150601f19603f3d011682016040523d82523d6000602084013e610c42565b606091505b5091509150610c5387838387610c5e565b979650505050505050565b60608315610ccd578251600003610cc6576001600160a01b0385163b610cc65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026c565b5081610aff565b610aff8383815115610ce25781518083602001fd5b8060405162461bcd60e51b815260040161026c9190610fc5565b803567ffffffffffffffff81168114610d1457600080fd5b919050565b600060208284031215610d2b57600080fd5b610d3482610cfc565b9392505050565b80356001600160a01b0381168114610d1457600080fd5b60008060408385031215610d6557600080fd5b610d6e83610d3b565b9150610d7c60208401610d3b565b90509250929050565b60008060008060808587031215610d9b57600080fd5b610da485610cfc565b9350610db260208601610d3b565b9250610dc060408601610d3b565b9396929550929360600135925050565b600060208284031215610de257600080fd5b610d3482610d3b565b8015158114610df957600080fd5b50565b60008060408385031215610e0f57600080fd5b610e1883610cfc565b91506020830135610e2881610deb565b809150509250929050565b600060208284031215610e4557600080fd5b5051919050565b60005b83811015610e67578181015183820152602001610e4f565b50506000910152565b60008151808452610e88816020860160208601610e4c565b601f01601f19169290920160200192915050565b6000604067ffffffffffffffff8516835260208181850152845160a083860152610ec960e0860182610e70565b905081860151603f1980878403016060880152610ee68383610e70565b88860151888203830160808a01528051808352908601945060009350908501905b80841015610f3957845180516001600160a01b0316835286015186830152938501936001939093019290860190610f07565b5060608901516001600160a01b031660a08901526080890151888203830160c08a01529550610f688187610e70565b9a9950505050505050505050565b600060208284031215610f8857600080fd5b8151610d3481610deb565b634e487b7160e01b600052603260045260246000fd5b60008251610fbb818460208701610e4c565b9190910192915050565b602081526000610d346020830184610e7056fea2646970667358221220d13e82f83c05c793d0057a01680f3abf06c5426d16543ca4b4665eb1ef0df79264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowlistDestinationChain(uint64,bool)": {
        "details": "Updates the allowlist status of a destination chain for transactions.",
        "params": {
          "_destinationChainSelector": "The selector of the destination chain to be updated.",
          "allowed": "The allowlist status to be set for the destination chain."
        }
      },
      "constructor": {
        "params": {
          "_link": "The address of the link contract.",
          "_router": "The address of the router contract."
        }
      },
      "transferTokensPayLINK(uint64,address,address,uint256)": {
        "details": "Assumes your contract has sufficient LINK tokens to pay for the fees.",
        "params": {
          "_amount": "token amount.",
          "_destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
          "_receiver": "The address of the recipient on the destination blockchain.",
          "_token": "token address."
        },
        "returns": {
          "messageId": "The ID of the message that was sent."
        }
      },
      "transferTokensPayNative(uint64,address,address,uint256)": {
        "details": "Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.",
        "params": {
          "_amount": "token amount.",
          "_destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
          "_receiver": "The address of the recipient on the destination blockchain.",
          "_token": "token address."
        },
        "returns": {
          "messageId": "The ID of the message that was sent."
        }
      },
      "withdraw(address)": {
        "details": "This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.",
        "params": {
          "_beneficiary": "The address to which the Ether should be transferred."
        }
      },
      "withdrawToken(address,address)": {
        "details": "This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.",
        "params": {
          "_beneficiary": "The address to which the tokens will be sent.",
          "_token": "The contract address of the ERC20 token to be withdrawn."
        }
      }
    },
    "title": "- A simple contract for transferring tokens across chains.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowlistDestinationChain(uint64,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "constructor": {
        "notice": "Constructor initializes the contract with the router address."
      },
      "transferTokensPayLINK(uint64,address,address,uint256)": {
        "notice": "Transfer tokens to receiver on the destination chain.pay in LINK.the token must be in the list of supported tokens.This function can only be called by the owner."
      },
      "transferTokensPayNative(uint64,address,address,uint256)": {
        "notice": "Transfer tokens to receiver on the destination chain.Pay in native gas such as ETH on Ethereum or MATIC on Polgon.the token must be in the list of supported tokens.This function can only be called by the owner."
      },
      "withdraw(address)": {
        "notice": "Allows the contract owner to withdraw the entire balance of Ether from the contract."
      },
      "withdrawToken(address,address)": {
        "notice": "Allows the owner of the contract to withdraw all tokens of a specific ERC20 token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3438,
        "contract": "contracts/Trade.sol:Trade",
        "label": "allowlistedChains",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 3441,
        "contract": "contracts/Trade.sol:Trade",
        "label": "s_router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRouterClient)51"
      },
      {
        "astId": 3444,
        "contract": "contracts/Trade.sol:Trade",
        "label": "s_linkToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)301"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)301": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRouterClient)51": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}